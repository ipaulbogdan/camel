Subject: [PATCH] Regen SBOM from commit 5072336e6b8bc4f75dabd184a83337431d61523f
---
Index: components/camel-azure/camel-azure-storage-blob/src/main/java/org/apache/camel/component/azure/storage/blob/BlobConfigurationOptionsProxy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/components/camel-azure/camel-azure-storage-blob/src/main/java/org/apache/camel/component/azure/storage/blob/BlobConfigurationOptionsProxy.java b/components/camel-azure/camel-azure-storage-blob/src/main/java/org/apache/camel/component/azure/storage/blob/BlobConfigurationOptionsProxy.java
--- a/components/camel-azure/camel-azure-storage-blob/src/main/java/org/apache/camel/component/azure/storage/blob/BlobConfigurationOptionsProxy.java	(revision cfca1dcc6becacd0fad9c67c56d7b1865e0bba00)
+++ b/components/camel-azure/camel-azure-storage-blob/src/main/java/org/apache/camel/component/azure/storage/blob/BlobConfigurationOptionsProxy.java	(revision f18ce6cb10e217b68f5d6eba016f47ffde7fc772)
@@ -63,7 +63,7 @@
     }
 
     public BlobListDetails getBlobListDetails(final Exchange exchange) {
-        return getOption(BlobExchangeHeaders::getBlobListDetailsFromHeaders, () -> null, exchange);
+        return getOption(BlobExchangeHeaders::getBlobListDetailsFromHeaders, BlobListDetails::new, exchange);
     }
 
     public String getPrefix(final Exchange exchange) {
@@ -88,12 +88,6 @@
         if (blobsOptions == null) {
             blobsOptions = new ListBlobsOptions();
         }
-
-        if (!ObjectHelper.isEmpty(blobsOptions)) {
-            return blobsOptions;
-        } else {
-            blobsOptions = new ListBlobsOptions();
-        }
 
         final BlobListDetails blobListDetails = getBlobListDetails(exchange);
         final String prefix = getPrefix(exchange);
Index: components/camel-azure/camel-azure-storage-blob/src/test/java/org/apache/camel/component/azure/storage/blob/integration/BlobConsumerIT.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/components/camel-azure/camel-azure-storage-blob/src/test/java/org/apache/camel/component/azure/storage/blob/integration/BlobConsumerIT.java b/components/camel-azure/camel-azure-storage-blob/src/test/java/org/apache/camel/component/azure/storage/blob/integration/BlobConsumerIT.java
--- a/components/camel-azure/camel-azure-storage-blob/src/test/java/org/apache/camel/component/azure/storage/blob/integration/BlobConsumerIT.java	(revision cfca1dcc6becacd0fad9c67c56d7b1865e0bba00)
+++ b/components/camel-azure/camel-azure-storage-blob/src/test/java/org/apache/camel/component/azure/storage/blob/integration/BlobConsumerIT.java	(revision f18ce6cb10e217b68f5d6eba016f47ffde7fc772)
@@ -46,25 +46,32 @@
     @EndpointInject("direct:start")
     private ProducerTemplate templateStart;
     private String batchContainerName;
+    private String prefixContainerName;
     private String blobName;
     private String blobName2;
 
     private BlobContainerClient containerClient;
     private BlobContainerClient batchContainerClient;
+    private BlobContainerClient prefixContainerClient;
     private final String regex = ".*\\.pdf";
+    private final String prefix = "blob-prefix";
 
     @BeforeAll
     public void setup() {
         batchContainerName = RandomStringUtils.randomAlphabetic(5).toLowerCase();
+        prefixContainerName = RandomStringUtils.randomAlphabetic(5).toLowerCase();
         blobName = RandomStringUtils.randomAlphabetic(5);
         blobName2 = RandomStringUtils.randomAlphabetic(5);
 
         containerClient = serviceClient.getBlobContainerClient(containerName);
         batchContainerClient = serviceClient.getBlobContainerClient(batchContainerName);
+        prefixContainerClient = serviceClient.getBlobContainerClient(prefixContainerName);
+
 
         // create test container
         containerClient.create();
         batchContainerClient.create();
+        prefixContainerClient.create();
     }
 
     @Test
@@ -182,6 +189,31 @@
         }
     }
 
+     @Test
+    void testPrefixBasedPolling() throws InterruptedException {
+        final MockEndpoint mockEndpoint = getMockEndpoint("mock:resultPrefix");
+        mockEndpoint.expectedMessageCount(1);
+
+        templateStart.send("direct:createBlob", exchange -> {
+            exchange.getIn().setBody("Blob 1");
+            exchange.getIn().setHeader(BlobConstants.BLOB_CONTAINER_NAME, prefixContainerName);
+            exchange.getIn().setHeader(BlobConstants.BLOB_NAME, prefix + "/test_blob_1");
+        });
+
+        templateStart.send("direct:createBlob", exchange -> {
+            exchange.getIn().setBody("Blob 2");
+            exchange.getIn().setHeader(BlobConstants.BLOB_CONTAINER_NAME, prefixContainerName);
+            exchange.getIn().setHeader(BlobConstants.BLOB_NAME, "non_prefixed_blob");
+        });
+
+        mockEndpoint.assertIsSatisfied();
+
+        String text = mockEndpoint.getExchanges().get(0).getIn().getBody(String.class);
+
+        assertEquals("Blob 1", text);
+        assertEquals(1, mockEndpoint.getExchanges().size());
+    }
+
     private String generateRandomBlobName(String prefix, String extension) {
         return prefix + randomAlphabetic(5).toLowerCase() + "." + extension;
     }
@@ -191,6 +223,7 @@
         // delete container
         containerClient.delete();
         batchContainerClient.delete();
+        prefixContainerClient.delete();
     }
 
     @Override
@@ -220,6 +253,9 @@
                      + "?prefix=aaaa&regex=" + regex)
                              .idempotentConsumer(body(), new MemoryIdempotentRepository())
                              .to("mock:resultRegex");
+
+                from("azure-storage-blob://cameldev/" + prefixContainerName + "?prefix=" + prefix)
+                        .to("mock:resultPrefix");
             }
         };
     }
